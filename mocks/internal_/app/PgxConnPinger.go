// Code generated by mockery v2.43.2. DO NOT EDIT.

package app

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// PgxConnPinger is an autogenerated mock type for the PgxConnPinger type
type PgxConnPinger struct {
	mock.Mock
}

type PgxConnPinger_Expecter struct {
	mock *mock.Mock
}

func (_m *PgxConnPinger) EXPECT() *PgxConnPinger_Expecter {
	return &PgxConnPinger_Expecter{mock: &_m.Mock}
}

// Ping provides a mock function with given fields: _a0
func (_m *PgxConnPinger) Ping(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PgxConnPinger_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type PgxConnPinger_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *PgxConnPinger_Expecter) Ping(_a0 interface{}) *PgxConnPinger_Ping_Call {
	return &PgxConnPinger_Ping_Call{Call: _e.mock.On("Ping", _a0)}
}

func (_c *PgxConnPinger_Ping_Call) Run(run func(_a0 context.Context)) *PgxConnPinger_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *PgxConnPinger_Ping_Call) Return(_a0 error) *PgxConnPinger_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PgxConnPinger_Ping_Call) RunAndReturn(run func(context.Context) error) *PgxConnPinger_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// NewPgxConnPinger creates a new instance of PgxConnPinger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPgxConnPinger(t interface {
	mock.TestingT
	Cleanup(func())
}) *PgxConnPinger {
	mock := &PgxConnPinger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
